plugins {
    id 'java'
    id 'antlr'
    id 'distribution'
    id 'application'
}

group 'net.signbit.samx'
version '0.2.7'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'commons-cli:commons-cli:1.4'
    compile 'org.apache.commons:commons-text:1.8'
    antlr 'org.antlr:antlr4:4.8'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages" ]

    doLast {
    copy {
      from 'build/generated-src/antlr/main/'
      include '*.*'
      into 'build/generated-src/antlr/main/net/signbit/samx/parser'
    }
    project.delete fileTree('build/generated-src/antlr/main').include('*.*')
  }
}

application {
    mainClassName = 'net.signbit.samx.PrettyPrint'
    executableDir = 'bin'
}

applicationDistribution.from("src/test/resources/") {
    into "test"
}

task createAllStartScripts() {
    // just a placeholder
}

def scripts = ['tokenize'    : 'net.signbit.samx.Tokenize',
               'to_xml'      : 'net.signbit.samx.ConvertToXml',
               'pretty_print': 'net.signbit.samx.PrettyPrint',
]

scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
    }
    createAllStartScripts.dependsOn(t)
}
