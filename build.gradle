plugins {
    id 'java-library'
    id 'antlr'
    id 'distribution'
    id 'application'
    id 'maven-publish'
}

group 'net.signbit.samx'
version '0.3.8'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-text:1.8'
    implementation 'com.github.jtidy:jtidy:1.0.2'
    antlr 'org.antlr:antlr4:4.8'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]

    doLast {
        copy {
            from 'build/generated-src/antlr/main/'
            include '*.*'
            into 'build/generated-src/antlr/main/net/signbit/samx/parser'
        }
        project.delete fileTree('build/generated-src/antlr/main').include('*.*')
    }
}

application {
    mainClassName = 'net.signbit.samx.PrettyPrint'
    executableDir = 'bin'
}

applicationDistribution.from("src/test/resources/") {
    into "test"
}

task createAllStartScripts() {
    // just a placeholder
}

def scripts = ['tokenize'       : 'net.signbit.samx.Tokenize',
               'to_xml'         : 'net.signbit.samx.ConvertToXml',
               'to_html'        : 'net.signbit.samx.ConvertToHtml',
               'pretty_print'   : 'net.signbit.samx.PrettyPrint',
               'generate_header': 'net.signbit.samx.literate.GenerateHeader',
]

scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtimeClasspath
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    createAllStartScripts.dependsOn(t)
}

 publishing {
	publications {
		maven(MavenPublication) {
			groupId = group
			artifactId = 'samxj'
			version = version

			from components.java
		}
	}
}
