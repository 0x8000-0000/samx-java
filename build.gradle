plugins {
    id 'java-library'
    id 'antlr'
    id 'application'
    id 'maven-publish'
    id "de.undercouch.download" version "4.0.4"
}

group 'net.signbit.samx'
version '0.4.5'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'org.relaxng', name: 'jing', version: '20181222'
    implementation group: 'xerces', name: 'xercesImpl', version: '2.12.0'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-text:1.8'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'com.github.jtidy:jtidy:1.0.2'
    antlr 'org.antlr:antlr4:4.8'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]

    doLast {
        copy {
            from 'build/generated-src/antlr/main/'
            include '*.*'
            into 'build/generated-src/antlr/main/net/signbit/samx/parser'
        }
        project.delete fileTree('build/generated-src/antlr/main').include('*.*')
    }
}

application {
    mainClassName = 'net.signbit.samx.PrettyPrint'
    executableDir = 'bin'
}

task createAllStartScripts() {
    // just a placeholder
}

def scripts = ['tokenize'       : 'net.signbit.samx.Tokenize',
               'to_xml'         : 'net.signbit.samx.ConvertToXml',
               'to_html'        : 'net.signbit.samx.ConvertToHtml',
               'pretty_print'   : 'net.signbit.samx.PrettyPrint',
               'extract_code'   : 'net.signbit.samx.ExtractCode',
               'generate_header': 'net.signbit.samx.literate.GenerateHeader',
]

scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtimeClasspath
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    createAllStartScripts.dependsOn(t)
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = group
			artifactId = 'samxj'
			version = version

			from components.java
		}
	}
}

task downloadRelaxSchema(type: Download) {
    src 'https://docbook.org/xml/5.1/rng/docbook.rng'
    dest buildDir
    overwrite false
}

task createDocs {
    def docs = file("$buildDir/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
    }
}

task generateBook(type: JavaExec) {
    description = 'Generates the documentation in DocBook format'
    group = 'verification'
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.signbit.samx.ConvertToXml'
    args = ['-i', 'doc/samx_language.samx', '-o', 'build/docs/samx_language.dbk', '-b', '-s', 'src/dist/schemas/docbook.rng.gz']
    mustRunAfter test
}

tasks.generateBook.dependsOn createDocs

check.dependsOn generateBook

distributions {
    main {
        contents {
            from 'README.md'

            from("src/test/resources/") {
                into "examples"
            }
            from(createDocs) {
                into 'docs'
            }
            from(generateBook) {
                into 'docs'
            }
        }
    }
}

